---
layout: post
title:  "Fun with Fibonacci"
date:   2017-06-16 10:33:20 -0500
categories: aws
---

<h1>Overview</h1>

<p>
The Fibonacci sequence an algorithm.  We give input to the algorithm, the algorithm runs, and we get an outcome.  Most applications follow this basic idea.  Your
basic web interface takes your input ( "GET /" for example ) and returns output in the form of a properly ( hopefully! ) formatted HTTP response.
</p>

<p>
The objective here is create an algorithm using ruby that can take input, use the Fibonacci sequence on the input, then give us output.  We expect the output
to be an array of numbers that line up with our expected output of the classical mathematical work.
</p>

<h1>Building</h1>

<p>
First let's do a quick and dirty example <a href="https://github.com/krogebry/krogebry.github.io/blob/master/code/fib/fib_big.rb">here</a>.  This is sort of the <b>brute force</b> approach to solving the problem.  In the interest of clean code
I'm going to do explain the code here in the post, but leave the code in a state without comments.  This way I can keep the conversation about the code separate from the
code itself.  You are welcome and encouraged to clone this repo and explore the code on your own.
</p>

<ul>
	<li>Seed array with 1,1 to get everything started</li>
	<li>Set the number of times we want to iterate</li>
	<li>Iterate n number of times</li>
	<li>For each iteration:<ul>
		<li>Set <b>a</b> and <b>b</b> using our current iteration and iteration + 1</li>
		<li>Add both a and b together and store the result</li>
		<li>Push the result to the seeded array</li>
	</ul></li>
	<li>Output the result to STDOUT</li>
</ul>

{% highlight bash %}
krogebry@ubuntu-secure:~/dev/krogebry.github.io/code/fib$ ./fib_big.rb 
[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]
{% endhighlight %}

<h1>Forward looking</h1>

<p>
Now let's say that we want to do what we normally do with things like this and make this into something that someone else can consume.  We're going to skip the
mechanics of building gems and all of that, and just go with a basic example of how we can implement this as a basic function.
</p>

<a href="https://github.com/krogebry/krogebry.github.io/blob/master/code/fib/fib_func.rb">Code</a>

<p>
The idea here is just to move the basic logic into a function that performs the same actions and creates the same output.
</p>

<% highlight bash %}
krogebry@ubuntu-secure:~/dev/krogebry.github.io/code/fib$ ./fib_func.rb 
[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]
<% endhighlight %}

<p>
This is about as quick and dirty as we can get.  This would allow us to implement the <b>fib(N)</b> function somewhere else.  Luckily this is still within the boundaries
of linear time: O(n).  This isn't very fancy or elegant, but probably would pass the <b>KISS</b> concept.
</p>

<h1>Tribonacci sequence</h1>

<h3>Example</h3>
<p>
[1, 1, 1, 3, 5, 9, 17, 31, 57, 105]
</p>

<p>
This is basically building on what we have with fib in that we're just adding one more element to the sequence.  The easy solution is to just add a "c" element to our loop and 
be done with it.  However, I made the choice to KISS the "Forward looking" part, but I'm not going to make that same choice here.
</p>

<p>
Instead I'm going to choose to take this one step further and build on the idea of an Nth processing system.  This will allow for an arbitrary number of "nacci" sequences.
I feel that this more appropriately demonstrates the real-world example of increasing complexity in an unknown future state.
</p>

<a href="https://github.com/krogebry/krogebry.github.io/blob/master/code/fib/nth_nacci.rb">Code</a>

<p>
We're moving things around a little here.  First we're creating an integer for <b>num_naccis</b> which is used in our main loop when creating the sequence.  We're also
implementing a new function called <b>make_fib_array(n)</b>.
</p>

{% highlight ruby %}
def make_fib_array(num_naccis)
  Array.new(num_naccis, 1)
end
{% endhighlight %}

<p>
This serves two important purposes:
</p>

<ul>
	<li>Breaking some basic functionality out into another function allows us to change it later if needed.</li>
	<li>Most importantly this allows us to wrap some unit testing around this function in the future.</li>
</ul>

<p>
Next we're changing how we're calculating the value of the next element.  Here we're using the <b>num_naccis</b> to add each element of the array.
</p>

{% highlight ruby %}
  num_fib_iterations.times do |i|
    result = 0
    num_naccis.times do |nacci_i|
      result += fib_array[i+nacci_i]
    end
    fib_array.push( result )
  end
{% endhighlight %}

<h4>Example: first iteration of the loop</h4>
<ul>
	<li>fib_array: [1,1,1]</li>
	<li>The method adds element 0,1,2, which is: 1+1+1=3</li>
</ul>

<h4>Example: second iteration of the loop</h4>
<ul>
	<li>fib_array: [1,1,1,3]</li>
	<li>The method adds element 1,2,3, which is: 1+1+3=5</li>
</ul>

<h3>Output n=3</h3>

{% highlight bash %}
krogebry@ubuntu-secure:~/dev/krogebry.github.io/code/fib$ ./nth_nacci.rb 
[1,
 1,
 1,
 3,
 5,
 9,
 17,
 31,
 57,
105,
193,
355,
653,
1201,
2209,
4063,
7473,
13745]
{% endhighlight %}

<h3>Output n=4</h3>

{% highlight bash %}
krogebry@ubuntu-secure:~/dev/krogebry.github.io/code/fib$ ./nth_nacci.rb 
[1,
 1,
 1,
 1,
 4,
 7,
 13,
 25,
 49,
 94,
 181,
 349,
 673,
 1297,
 2500,
 4819,
 9289,
 17905,
 34513]
{% endhighlight %}

