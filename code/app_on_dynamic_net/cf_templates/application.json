{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "DesiredCapacity": {
      "Type": "Number",
      "Default": "1",
      "Description": "Number of instances to launch in your ECS cluster."
    },
    "MaxSize": {
      "Type": "Number",
      "Default": "1",
      "Description": "Maximum number of instances that can be launched in your ECS cluster."
    },

    "ALBZones": {
      "Type": "List<String>",
      "Description": "The list of AvailabilityZones for your Virtual Private Cloud (VPC)",
      "ConstraintDescription": "must be a list if valid EC2 availability zones for the selected Virtual Private Cloud"
    },
    "ALBSubnetIds": {
      "Type": "List<AWS::EC2::Subnet::Id>",
      "Description": "The list of SubnetIds in your Virtual Private Cloud (VPC)",
      "ConstraintDescription": "must be a list of an existing subnets in the selected Virtual Private Cloud."
    },

    "AppZones": {
      "Type": "List<String>",
      "Description": "The list of AvailabilityZones for your Virtual Private Cloud (VPC)",
      "ConstraintDescription": "must be a list if valid EC2 availability zones for the selected Virtual Private Cloud"
    },
    "AppSubnetIds": {
      "Type": "List<AWS::EC2::Subnet::Id>",
      "Description": "The list of SubnetIds in your Virtual Private Cloud (VPC)",
      "ConstraintDescription": "must be a list of an existing subnets in the selected Virtual Private Cloud."
    },

    "VpcId": {
      "Type": "AWS::EC2::VPC::Id",
      "Description": "VpcId of your existing Virtual Private Cloud (VPC)",
      "ConstraintDescription": "Must be the VPC Id of an existing Virtual Private Cloud."
    },
    "KeyPairName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "The EC2 Key Pair to allow SSH access to the instances",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "InstanceType": {
      "Type": "String",
      "Default": "t2.micro",
      "Description": "The EC2 instance type",
      "ConstraintDescription": "You can specify only t2.mirco."
    }
  },
  "Mappings": {
    "AWSRegionToAMI": {
      "us-east-1": {
        "AMIID": "ami-1924770e"
      },
      "us-east-2": {
        "AMIID": "ami-446f3521"
      },
      "us-west-2": {
        "AMIID": "ami-56ed4936"
      }
    }
  },
  "Resources": {
    "ECSCluster": {
      "Type": "AWS::ECS::Cluster"
    },

    "EC2InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [{ "Ref": "EC2Role" }]
      }
    },

    "EC2Role": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": [
                "ec2.amazonaws.com"
              ]
            },
            "Action": [
              "sts:AssumeRole"
            ]
          }]
        },
        "Path": "/",
        "Policies": [{
          "PolicyName": "ecs-instance-service",
          "PolicyDocument": {
            "Statement": [{
              "Effect": "Allow",
              "Action": [
                "ecs:DeregisterContainerInstance",
                "ecs:DiscoverPollEndpoint",
                "ecs:Poll",
                "ecs:RegisterContainerInstance",
                "ecs:StartTelemetrySession",
                "ecs:Submit*",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": "*"
            }]
          }
        }]
      }
    },

    "EC2InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [{ "Ref": "EC2Role" }]
      }
    },

    "taskdefinition": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "ContainerDefinitions": [{
          "Cpu": "10",
          "Name": "wt-api",
          "Image": "krogebry/wt-api:latest",
          "Memory": 300,
          "Essential": "true",
          "LogConfiguration": {
            "LogDriver": "awslogs",
            "Options": {
              "awslogs-group": "krogebry-test",
              "awslogs-region": { "Ref": "AWS::Region" },
              "awslogs-stream-prefix": "awslogs-example"
            }
          },
          "PortMappings": [{
            "HostPort": 80,
            "ContainerPort": 8080
          }]
        }]
      }
    },

    "EcsALB": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Subnets": {
          "Ref": "ALBSubnetIds"
        },
        "SecurityGroups": [
          {
            "Ref": "PublicHTTP"
          }
        ],
        "Tags": [
          {
            "Key": "Role",
            "Value": "KrogebryTest"
          }
        ]
      }
    },

    "EcsTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Name": {
          "Ref": "AWS::StackName"
        },
        "Port": 8080,
        "VpcId": {
          "Ref": "VpcId"
        },
        "Matcher": {
          "HttpCode": "200"
        },
        "Protocol": "HTTP",
        "HealthCheckProtocol": "HTTP",
        "HealthCheckTimeoutSeconds": 10,
        "HealthCheckIntervalSeconds": 30,
        "HealthyThresholdCount": 4,
        "TargetGroupAttributes": [
          {
            "Key": "deregistration_delay.timeout_seconds",
            "Value": "20"
          }
        ],
        "UnhealthyThresholdCount": 3,
        "Tags": [
          {
            "Key": "key",
            "Value": "value"
          },
          {
            "Key": "key2",
            "Value": "value2"
          }
        ]
      }
    },

    "ALBListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "Port": "80",
        "Protocol": "HTTP",
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": {
              "Ref": "EcsTargetGroup"
            }
          }
        ],
        "LoadBalancerArn": {
          "Ref": "EcsALB"
        }
      }
    },

    "ECSAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "MinSize": "1",
        "MaxSize": {
          "Ref": "MaxSize"
        },
        "DesiredCapacity": {
          "Ref": "DesiredCapacity"
        },
        "AvailabilityZones": {
          "Ref": "AppZones"
        },
        "VPCZoneIdentifier": {
          "Ref": "AppSubnetIds"
        },
        "LaunchConfigurationName": {
          "Ref": "ContainerInstances"
        }
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT15M"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "PauseTime": "PT15M",
          "WaitOnResourceSignals": "true"
        }
      }
    },

    "ContainerInstances": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "commands": {
              "01_add_instance_to_cluster": {
                "command": {
                  "Fn::Sub": "#!/bin/bash\necho ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config\n"
                }
              }
            },
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": {
                  "Fn::Sub": "[main]\nstack=${AWS::StackId}\nregion=${AWS::Region}\n"
                },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Sub": "[cfn-auto-reloader-hook]\ntriggers=post.update\npath=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init\naction=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ContainerInstances --region ${AWS::Region}\nrunas=root\n"
                }
              }
            },
            "services": {
              "sysvinit": {
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionToAMI",
            {
              "Ref": "AWS::Region"
            },
            "AMIID"
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "IamInstanceProfile": {
          "Ref": "EC2InstanceProfile"
        },
        "KeyName": {
          "Ref": "KeyPairName"
        },
        "SecurityGroups": [
          {
            "Ref": "PublicHTTP"
          }
        ],
        "InstanceMonitoring": "false",
        "AssociatePublicIpAddress": "true",
        "UserData": {
          "Fn::Base64": {
            "Fn::Sub": "#!/bin/bash -xe\nyum install -y aws-cfn-bootstrap\n/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ContainerInstances --region ${AWS::Region}\nsleep 0\n/opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}\n"
          }
        }
      }
    },

    "PublicHTTP": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": { "Ref": "VpcId" },
        "GroupDescription": "Allows public access by HTTP",
        "SecurityGroupIngress": [{
          "CidrIp": "0.0.0.0/0",
          "FromPort": 80,
          "ToPort": 80,
          "IpProtocol": "tcp"
        },{
          "CidrIp": "0.0.0.0/0",
          "FromPort":"31000",
          "ToPort":"61000",
          "IpProtocol": "tcp"
        },{
          "CidrIp": "172.0.0.0/8",
          "FromPort": 22,
          "ToPort": 22,
          "IpProtocol": "tcp"
        }]
      }
    },

    "ECSServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ecs.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "ecs-service",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "elasticloadbalancing:Describe*",
                    "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                    "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                    "ec2:Describe*",
                    "ec2:AuthorizeSecurityGroupIngress",
                    "elasticloadbalancing:DeregisterTargets",
                    "elasticloadbalancing:RegisterTargets"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },

    "service": {
      "Type": "AWS::ECS::Service",
      "DependsOn": [
        "ALBListener",
        "ECSAutoScalingGroup",
        "ECSServiceRole",
        "EcsTargetGroup",
        "EC2Role"
      ],
      "Properties": {
        "Cluster": {
          "Ref": "ECSCluster"
        },
        "DesiredCount": "1",
        "LoadBalancers": [
          {
            "ContainerName": "wt-api",
            "ContainerPort": "8080",
            "TargetGroupArn": {
              "Ref": "EcsALB"
            }
          }
        ],
        "Role": "krogebry-test",
        "TaskDefinition": {
          "Ref": "taskdefinition"
        }
      }
    }
  },

  "Outputs": {
    "ecsservice": {
      "Value": {
        "Ref": "service"
      }
    },
    "ecscluster": {
      "Value": {
        "Ref": "ECSCluster"
      }
    },
    "taskdef": {
      "Value": {
        "Ref": "taskdefinition"
      }
    }
  }
}
